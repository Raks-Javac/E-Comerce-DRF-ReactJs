# Multi-stage Dockerfile for Render deployment
FROM node:18-alpine AS frontend-build

# Set working directory for frontend
WORKDIR /app/frontend

# Copy package files and install dependencies
COPY frontend/package*.json ./
RUN npm ci --silent

# Copy frontend source and build with /web base path
COPY frontend/ ./
ENV PUBLIC_URL=/web
RUN npm run build

# Production stage - Python backend with nginx
FROM python:3.9-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PORT=8000

# Set work directory
WORKDIR /app

# Install system dependencies including nginx
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
    postgresql-client \
    gcc \
    python3-dev \
    musl-dev \
    libpq-dev \
    nginx \
    supervisor \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY backend/requirements.txt /app/
RUN pip install --no-cache-dir -r requirements.txt

# Copy backend code
COPY backend/ /app/

# Create directories for static and media files
RUN mkdir -p /app/staticfiles /app/media /var/www/html/web

# Copy built frontend files to nginx web directory
COPY --from=frontend-build /app/frontend/build/ /var/www/html/web/

# Verify files are copied correctly
RUN ls -la /var/www/html/web/ && cat /var/www/html/web/index.html | head -20

# Collect static files from Django apps only
RUN python manage.py collectstatic --noinput

# Create nginx configuration
RUN echo 'server {\n\
    listen 80;\n\
    server_name _;\n\
    \n\
    # Serve React app at /web\n\
    location /web/ {\n\
    alias /var/www/html/web/;\n\
    try_files $uri $uri/ @react;\n\
    index index.html;\n\
    }\n\
    \n\
    # Handle React routing fallback\n\
    location @react {\n\
    alias /var/www/html/web/;\n\
    try_files /index.html =404;\n\
    }\n\
    \n\
    # Serve static assets for React app\n\
    location /web/static/ {\n\
    alias /var/www/html/web/static/;\n\
    expires 1y;\n\
    add_header Cache-Control "public, immutable";\n\
    }\n\
    \n\
    # Proxy Django app for API and admin\n\
    location / {\n\
    proxy_pass http://127.0.0.1:8000;\n\
    proxy_set_header Host $host;\n\
    proxy_set_header X-Real-IP $remote_addr;\n\
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\
    proxy_set_header X-Forwarded-Proto $scheme;\n\
    }\n\
    }' > /etc/nginx/sites-available/default

# Create supervisor configuration
RUN echo '[supervisord]\n\
    nodaemon=true\n\
    \n\
    [program:nginx]\n\
    command=nginx -g "daemon off;"\n\
    autostart=true\n\
    autorestart=true\n\
    stderr_logfile=/var/log/nginx.err.log\n\
    stdout_logfile=/var/log/nginx.out.log\n\
    \n\
    [program:django]\n\
    command=gunicorn ecommerce_backend.wsgi:application --bind 127.0.0.1:8000 --workers 3 --timeout 120\n\
    directory=/app\n\
    autostart=true\n\
    autorestart=true\n\
    stderr_logfile=/var/log/django.err.log\n\
    stdout_logfile=/var/log/django.out.log' > /etc/supervisor/conf.d/supervisord.conf

# Create entrypoint script
RUN echo '#!/bin/bash\n\
    set -e\n\
    echo "Starting Django application..."\n\
    python manage.py migrate --noinput\n\
    python manage.py collectstatic --noinput\n\
    if [ "$DJANGO_SUPERUSER_EMAIL" ] && [ "$DJANGO_SUPERUSER_USERNAME" ] && [ "$DJANGO_SUPERUSER_PASSWORD" ]; then\n\
    python manage.py shell -c "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(email=\"$DJANGO_SUPERUSER_EMAIL\").exists() or User.objects.create_superuser(\"$DJANGO_SUPERUSER_USERNAME\", \"$DJANGO_SUPERUSER_EMAIL\", \"$DJANGO_SUPERUSER_PASSWORD\")"\n\
    echo "Superuser setup completed"\n\
    fi\n\
    echo "Starting nginx and Django with supervisor..."\n\
    exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf' > /app/entrypoint.sh

# Make entrypoint executable
RUN chmod +x /app/entrypoint.sh

# Expose port
EXPOSE $PORT

# Run the entrypoint script
CMD ["/app/entrypoint.sh"]
