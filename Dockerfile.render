# Multi-stage Dockerfile for Render deployment
FROM node:18-alpine AS frontend-build

# Set working directory for frontend
WORKDIR /app/frontend

# Copy package files and install dependencies
COPY frontend/package*.json ./
RUN npm ci --silent

# Copy frontend source and build
COPY frontend/ ./
RUN npm run build

# Production stage - Python backend
FROM python:3.9-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PORT=8000

# Set work directory
WORKDIR /app

# Install system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
    postgresql-client \
    gcc \
    python3-dev \
    musl-dev \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY backend/requirements.txt /app/
RUN pip install --no-cache-dir -r requirements.txt

# Copy backend code
COPY backend/ /app/

# Create directories for static and media files
RUN mkdir -p /app/staticfiles /app/media

# Copy built frontend files to staticfiles directory
# Copy all files from React build directory
COPY --from=frontend-build /app/frontend/build/ /app/staticfiles/

# Collect static files from Django apps (this will merge with React files)
RUN python manage.py collectstatic --noinput

# Create entrypoint script
RUN echo '#!/bin/bash\n\
    set -e\n\
    echo "Starting Django application..."\n\
    python manage.py migrate --noinput\n\
    python manage.py collectstatic --noinput\n\
    if [ "$DJANGO_SUPERUSER_EMAIL" ] && [ "$DJANGO_SUPERUSER_USERNAME" ] && [ "$DJANGO_SUPERUSER_PASSWORD" ]; then\n\
        python manage.py shell -c "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(email=\"$DJANGO_SUPERUSER_EMAIL\").exists() or User.objects.create_superuser(\"$DJANGO_SUPERUSER_USERNAME\", \"$DJANGO_SUPERUSER_EMAIL\", \"$DJANGO_SUPERUSER_PASSWORD\")"\n\
        echo "Superuser setup completed"\n\
    fi\n\
    echo "Starting Gunicorn server..."\n\
    exec gunicorn ecommerce_backend.wsgi:application --bind 0.0.0.0:$PORT --workers 3 --timeout 120' > /app/entrypoint.sh

# Make entrypoint executable
RUN chmod +x /app/entrypoint.sh

# Expose port
EXPOSE $PORT

# Run the entrypoint script
CMD ["/app/entrypoint.sh"]
