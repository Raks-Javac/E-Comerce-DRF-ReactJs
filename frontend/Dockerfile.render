# Simple React app deployment for Render
FROM node:18-alpine AS build

# Set working directory
WORKDIR /app

# Set NODE environment
ENV NODE_ENV=production
ENV GENERATE_SOURCEMAP=false

# Copy package files
COPY package*.json ./

# Install dependencies with increased memory and timeout
RUN npm ci --silent --prefer-offline --no-audit --progress=false

# Copy source code
COPY . .

# Build the app with increased memory limit
RUN node --max-old-space-size=4096 node_modules/.bin/react-scripts build

# Production stage with nginx
FROM nginx:alpine

# Remove default nginx config
RUN rm /etc/nginx/conf.d/default.conf

# Copy built app to nginx
COPY --from=build /app/build /usr/share/nginx/html

# Create nginx configuration for React Router with error handling
RUN echo 'server {\n\
    listen 80;\n\
    server_name _;\n\
    root /usr/share/nginx/html;\n\
    index index.html;\n\
    \n\
    # Error pages\n\
    error_page 404 /index.html;\n\
    \n\
    # Handle React Router\n\
    location / {\n\
    try_files $uri $uri/ /index.html;\n\
    }\n\
    \n\
    # Cache static assets\n\
    location /static/ {\n\
    expires 1y;\n\
    add_header Cache-Control "public, immutable";\n\
    }\n\
    \n\
    # Security headers\n\
    add_header X-Frame-Options "SAMEORIGIN" always;\n\
    add_header X-Content-Type-Options "nosniff" always;\n\
    \n\
    # Gzip compression\n\
    gzip on;\n\
    gzip_vary on;\n\
    gzip_min_length 1024;\n\
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n\
    }' > /etc/nginx/conf.d/default.conf

# Expose port 80
EXPOSE 80

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
